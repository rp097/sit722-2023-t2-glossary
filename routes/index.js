var express = require('express');
var router = express.Router();

const nameList = [
{'id':1, 'name':'DevOps', 'def':'DevOps is the combination of cultural philosophies, practices, and tools that increases an organizations ability to deliver applications and services at a high velocity: evolving and improving products at a faster pace than organizations using traditional software development and infrastructure management processes.', 'ref':'https://aws.amazon.com/devops/what-is-devops/'},
{'id':2, 'name':'Waterfall', 'def':'Waterfall is a project delivery mechanism where tasks are completed in a sequential order to achieve a specific goal.', 'ref':'Coupland, M. 2021, DevOps Adoption Strategies: Principles, Processes, Tools, and Trends / Coupland, Martyn, Packt Publishing, viewed 11 July 2022, <https://discovery.ebsco.com/linkprocessor/plink?id=ae8dea02-45fd-3d96-b3e5-4ab0506facac>.'},
{'id':3, 'name':'GitHub','def':'Git is a popular open source version control system. It is a web-based hosted service for Git repositories. GitHub allows you to host remote Git repositories, and has a wealth of community-based services that make it ideal for open source projects.', 'ref':'Vadapalli, S. 2018, DevOps: continuous delivery, integration, and deployment with DevOps: dive into the core DevOps strategies / Sricharan Vadapalli, Packt Publishing, viewed 11 July 2022'},
{'id':4, 'name':'Docker','def':'A Docker container consists of packaging the application and its dependencies all up in a box. It runs as an isolated process on the host operating system, sharing the kernel with another container. It enjoys resource isolation and allocation benefits like VMs, but is much more portable and efficient.','ref':'Vadapalli, S. 2018, DevOps: continuous delivery, integration, and deployment with DevOps: dive into the core DevOps strategies / Sricharan Vadapalli, Packt Publishing, viewed 11 July 2022'},
{'id':5, 'name':'Continuous Integration','def':'Continuous integration (CI) is the practice of quickly integrating newly developed code with the rest of the application code to be released. This saves time when the application is ready to be released. This process is usually automated and produces a build artifact at the end of the process.','ref':'Coupland, M. 2021, DevOps Adoption Strategies: Principles, Processes, Tools, and Trends / Coupland, Martyn, Packt Publishing, viewed 11 July 2022'},
{'id':6, 'name':'Continuous Deployment', 'def':'Continuous deployment is one step beyond continuous delivery. Every change that passes through all the stages of your production pipeline is released to your customers. There is no human intervention - a failed test, at this stage, will prevent new releases to production.', 'ref': 'Coupland, M. 2021, DevOps Adoption Strategies: Principles, Processes, Tools, and Trends / Coupland, Martyn, Packt Publishing, viewed 11 July 2022'},
{'id':7, 'name':'Agile','def':'Development is organized in an iterative way, in small batches called sprints , which are constrained in duration. The main objective is the satisfaction of the customer or user, measured frequently and enriched by collecting feedbacks on a regular basis.','ref':'Caseau, Yves. The Lean Approach to Digital Transformation : From Customer to Code and from Code to Customer, Productivity Press, 2022. ProQuest Ebook Central'},
{'id':8, 'name':'Kubernetes', 'def': 'Kubernetes is an open source orchestration system for Docker containers. It groups containers into logical units for easy management and discovery, handles scheduling on nodes, and actively manages workloads to ensure their state matches users declared intentions.','ref':'Vadapalli, S. 2018, DevOps: continuous delivery, integration, and deployment with DevOps: dive into the core DevOps strategies / Sricharan Vadapalli, Packt Publishing, viewed 11 July 2022'},
{'id':9, 'name':'Jenkins', 'def': 'Jenkins is a web-enabled tool used through application or a web server such as Tomcat, for continuous build, deployment, and testing, and is integrated with build tools such as Ant/Maven and the source code repository Git. It also has master and dump slaves.','ref':'Vadapalli, S. 2018, DevOps: continuous delivery, integration, and deployment with DevOps: dive into the core DevOps strategies / Sricharan Vadapalli, Packt Publishing, viewed 11 July 2022'},
{'id':10, 'name':'Render', 'def': 'Render is a unified cloud to build and run all apps and websites with free TLS certificates, a global CDN, DDoS protection, private networks and auto deploys from Git.', 'ref':'www.render.com'},
{'id':11, 'name':'JIRA','def':'JIRA is an agile software project management tool that allows you to scope, track and update issues on a single platform. It also allows you to upload documentation and facilitates reporting.','ref':'www.atlassian.com'},
{'id':12,'name':'Selenium','def':'Selenium is an efficient testing tool that helps run and playback functional test cases on web browsers without the need to know any scripting language. It is open-source and offers a plethora of tools and libraries that cater to browser automation.','ref':'https://www.selenium.dev/'},
{'id':13,'name':'Mocha and Chai','def':'They are javascript based testing frameworks that are used to write test cases, particularly in Node.JS programs that run on the spm server. It can be used for unit testing, functional testing, and so on. Test cases are generally written in a separate file named "test.js" and run using a command such as npm test as defined in the json file.','ref':'Dalal, M. and Dash, J., JavaScript Testing with Mocha and Chai. Packt Publishing. ISBN-13: 978-1783982648.'},
{'id':14,'name':'Jest','def':'Similar to Mocha and chai, Jest is a javascript based testing framework that mainly assists testing of react applications. It is easy to use, has many powerful features and has a set of extremely robust testing capabilities such as snapshot testing, which allows snapshotting of components or functions in order to maintain consistency over time. It is maintained by Facebook','ref':'Copes, F. (2020), "The Jest Handbook." , https://jestjs.io/docs/en/getting-started'},
{'id':15,'name':'Ansible','def':'Ansible is an automated configuration tool that maintains the required configuration for systems to run. It maintains configuration settings in YAML files called playbooks, which stores the desired state of the systems and Ansible ensures execution of necessary steps to maintain that desired state. It was developed by Red Hat.','ref':'https://www.ansible.com/'},
{'id':16,'name':'Puppet','def':'Like Ansible, Puppet is also a configuration automation management tool that ensures desired state of the systems. However, the necessary configurations are specified to puppet in the Puppet Domain Specific Language (DSL) rather than a list of steps.','ref':'https://www.puppet.com/'},
{'id':17,'name':'Infrastructure as Code (IaC) Refactoring','def':'IaC refactoring involves the process of continuously improving and optimizing infrastructure code to make it more maintainable, scalable, and reusable. Both Ansible and Puppet fall under this category.','ref':'"What is Infrastructure as code?",https://www.redhat.com/'},
{'id':18,'name':'GitOps','def':'GitOps comprises of a collection of practices that seek to leverage version control systems like Git in order to manage infrastructure and application deployments. It promotes using Git as the single source of truth for both code and infrastructure, thereby enabling automated deployments based on Git repository changes.','ref':'"What is GitOps?",https://about.gitlab.com/topics/gitops/'},
{'id':19,'name':'ChatOps','def':'ChatOps entails the process of using chat and collaboration tools such as Slack, Microsoft Teams, and so on to facilitate communication and collaboration among development, operations, and other teams. It encourages real-time conversations, automation, and decision-making within the confines of a chat platform.','ref':'"ChatOps for incident management",https://www.atlassian.com/'},
{'id':20,'name':'NoOps','def':'NoOps is a theory that envisions fully automated IT operations, where developers handle end-to-end application lifecycle management without dedicated operations teams. It can be thought of as an extension of the DevOps philosophy that seeks to automate and do away with as much operational work as possible.','ref':'"NoOps(No Operations)",https://www.techtarget.com/searchitoperations/definition/NoOps'},
{'id':21,'name':'Docker Objects','def':'The various components of the Docker application such as Images, Containers, Plugins, and so on are referred to as objects. The requests for these objects are managed by the Docker daemon.','ref':'"Docker Overview",https://docs.docker.com/get-started/overview/'},
{'id':22,'name':'Docker Daemon (dockerd)','def':'The Docker architecture follows a client-server architecture. The client is where the developer would enter commands such as "docker build", "docker run", and so on. The Docker Daemon listens through an API for such requests and then handles the actual building of images and containers accordingly.','ref':'"Docker Daemon - All you need to know about it", https://intellipaat.com/blog/docker-daemon/'},
{'id':23,'name':'Docker Registry','def':'Refers to a digital registry where docker images are stored. This might be public or private. For example, DockerHub is the public repository of Docker where it looks for images by default. It functions like a repository, on which one can perform Docker push and Docker pull actions.','ref':'"Docker Overview",https://docs.docker.com/get-started/overview/'},
{'id':24,'name':'Docker Image','def':'An Image is a Docker Object that consists of instructions(written in Dockerfile) to create a Docker container. It is usually based on a pre-built official image. For example, we may build a custom image based on the official Node JS image of Docker.','ref':'"What is a Docker container?", https://www.techtarget.com/searchitoperations/definition/Docker-image#:~:text=A%20Docker%20image%20is%20a,virtual%20machine%20(VM)%20environments.'},
{'id':25,'name':'Docker Container','def':'The Docker container refers to an executable version of the Docker image that runs in an isolated manner from the local machine it was built on. It is also loosely coupled from other containers. If there are multiple containers, we use the docker-compose commands to manage them.','ref':'Turnbull, J. (2014), The Docker book .'},
{'id':26,'name':'Jenkins Controller','def':'The Jenkins Controller manages the Jenkins Agents and is thereby responsible for scheduling and monitoring tasks, maintaining job configurations, and so on. In this capacity, it forms a core part of Jenkins and plays a crucial role in controlling the entire automation process.','ref':'Soni, Mitesh (2015), Jenkins Essentials'},
{'id':27,'name':'Agent','def':'The Jenkins Agent is a separate machine/container that communicates with the Jenkins controller in order to execute build and automation tasks delegated by the it, thereby helping distribute workloads and facilitate parallel processing in Jenkins pipelines.','ref':'Soni, Mitesh (2015), Jenkins Essentials'},
{'id':28,'name':'Artifact','def':'Jenkins artifact refers to files that are produced as a result of a Jenkins build/automation process. These artifacts are typically generated during the build and can include compiled code, executable binaries, libraries, documentation, or any other files that are essential for deploying or testing the software.','ref':'https://www.jenkins.io/doc/book/glossary/'},
{'id':29,'name':'Upstream Job','def':'A Jenkins upstream job refers to a job that eventually triggers another job in the Jenkins pipeline, thereby creating a sequential workflow where changes or results from the upstream job might potentially influence the behavior of the downstream jobs.','ref':'Soni, Mitesh (2015), Jenkins Essentials'},
{'id':30,'name':'Downstream Job','def':'A Jenkins downstream job refers to a job that is triggered by an upstream job in the Jenkins pipeline. In this regard, it might use the results or artifacts produced by the upstream job as inputs or dependencies for the downstream job to execute.','ref':'https://www.jenkins.io/doc/book/glossary/'}
];

/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'SIT722', sub:'Software Deployment and Operations Glossary', names: nameList});
});

module.exports = router;
